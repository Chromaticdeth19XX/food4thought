
curl https://api.mapbox.com/{api}/{version}

https://api.mapbox.com/datasets/v1/vicagbasi/cjcjroncb3ioz34mm87c9ldvc?access_token=pk.eyJ1IjoidmljYWdiYXNpIiwiYSI6ImNqY2lpcWE2aTNteGEycWxscDl2NzhpZWQifQ.KJIJ5fZsHtxebZwwROAc5w


=================================
map.on('load', function(e) {
// Add the data to your map as a layer
map.addLayer({
    id: 'locations',
    type: 'symbol',
    // Add a GeoJSON source containing place coordinates and information.
    source: {
      type: 'geojson',
      data: SITES
    },
    layout: {
      'icon-image': 'restaurant-15',
      'icon-allow-overlap': true,
    }
  });

  function buildLocationList(SITES) {
    // Iterate through the list of stores
    for (i = 0; i < data.features.length; i++) {
      var currentFeature = data.features[i];
      // Shorten data.feature.properties to just `prop` so we're not
      // writing this long form over and over again.
      var prop = currentFeature.properties;
      // Select the listing container in the HTML and append a div
      // with the class 'item' for each store
      var listings = document.getElementById('listings');
      var listing = listings.appendChild(document.createElement('div'));
      listing.className = 'item';
      listing.id = 'listing-' + i;

      // Create a new link with the class 'title' for each store
      // and fill it with the store address
      var link = listing.appendChild(document.createElement('a'));
      link.href = '#';
      link.className = 'title';
      link.dataPosition = i;
      link.innerHTML = prop.address;

      // Create a new div with the class 'details' for each store
      // and fill it with the city and phone number
      var details = listing.appendChild(document.createElement('div'));
      details.innerHTML = prop.city;
      if (prop.phone) {
        details.innerHTML += ' &middot; ' + prop.phoneFormatted;
      }
    }
  }
});



===============================
// Add an event listener for when a user clicks on the map
this.map.on('click', function(e) {
  // Query all the rendered points in the view
  var features = this.map.queryRenderedFeatures(e.point, { layers: ['locations'] });
  if (features.length) {
    var clickedPoint = features[0];
    // 1. Fly to the point
    flyToStore(clickedPoint);
    // 2. Close all other popups and display popup for clicked store
    createPopUp(clickedPoint);
    // 3. Highlight listing in sidebar (and remove highlight for all other listings)
    var activeItem = document.getElementsByClassName('active');
    if (activeItem[0]) {
      activeItem[0].classList.remove('active');
    }
    // Find the index of the store.features that corresponds to the clickedPoint that fired the event listener
    var selectedFeature = clickedPoint.properties['Address1'];

    for (var i = 0; i < this.mealSites.features.length; i++) {
      if (this.mealSites.features[i].properties['Address1'] === selectedFeature) {
        selectedFeatureIndex = i;
      }
    }
    // Select the correct list item using the found index and add the active class
    var listing = document.getElementById('listing-' + selectedFeatureIndex);
    listing.classList.add('active');
  }
});










    // THIS FUNCTION BUILDS THE LIST OF ALL ADDRESS ON THE MAP :)

    function buildLocationList(data) {
      // Iterate through the list of stores

      for (let i = 0; i < data.features.length; i++) {
        var currentFeature = data.features[i];
        // Shorten data.feature.properties to just `prop` so we're not
        // writing this long form over and over again.
        var prop = currentFeature.properties;
        // Select the listing container in the HTML and append a div
        // with the class 'item' for each store
        var listings = document.getElementById('listings');
        var listing = listings.appendChild(document.createElement('div'));
        listing.className = 'item';
        listing.id = 'listing-' + i;

        // Create a new link with the class 'title' for each store
        // and fill it with the store address
        var link = listing.appendChild(document.createElement('a'));
        link.href = '#';
        link.className = 'title';
        // link.dataPosition = i;
        link.innerHTML = prop["Name"];

        // Create a new div with the class 'details' for each store
        // and fill it with the city and phone number
        var details = listing.appendChild(document.createElement('div'));
        details.innerHTML = prop["City"];
        if (prop["Phone"]) {
          details.innerHTML += ' &middot; ' + prop["Phone"] + '<hr>';
        }
        // Add an event listener for the links in the sidebar listing
        link.addEventListener('click', function(e) {
          // Update the currentFeature to the store associated with the clicked link
          var clickedListing = data.features[this.dataPosition];
          // 1. Fly to the point associated with the clicked link
          flyToStore(clickedListing);
          // 2. Close all other popups and display popup for clicked store
          createPopUp(clickedListing);
          // 3. Highlight listing in sidebar (and remove highlight for all other listings)
          var activeItem = document.getElementsByClassName('active');
          if (activeItem[0]) {
            activeItem[0].classList.remove('active');
          }
          this.parentNode.classList.add('active');
        });

        // Add an event listener for when a user clicks on the map
        map.on('click', function(e) {
          // Query all the rendered points in the view
          var features = this.map.queryRenderedFeatures(e.point, { layers: ['locations'] });
          if (features.length) {
            var clickedPoint = features[0];
            // 1. Fly to the point
            flyToStore(clickedPoint);
            // 2. Close all other popups and display popup for clicked store
            createPopUp(clickedPoint);
            // 3. Highlight listing in sidebar (and remove highlight for all other listings)
            var activeItem = document.getElementsByClassName('active');
            if (activeItem[0]) {
              activeItem[0].classList.remove('active');
            }
            // Find the index of the store.features that corresponds to the clickedPoint that fired the event listener
            var selectedFeature = clickedPoint.properties.Address;

            for (var i = 0; i < stores.features.length; i++) {
              if (stores.features[i].properties.Address === selectedFeature) {
                selectedFeatureIndex = i;
              }
            }
            // Select the correct list item using the found index and add the active class
            var listing = document.getElementById('listing-' + selectedFeatureIndex);
            listing.classList.add('active');
          }
        });
        link.addEventListener('click', function(e) {
        // Update the currentFeature to the store associated with the clicked link
        var clickedListing = data.features[this.dataPosition];

        // 1. Fly to the point associated with the clicked link
        flyToStore(clickedListing);

        // 2. Close all other popups and display popup for clicked store
        createPopUp(clickedListing);

        // 3. Highlight listing in sidebar (and remove highlight for all other listings)
        var activeItem = document.getElementsByClassName('active');

        if (activeItem[0]) {
          activeItem[0].classList.remove('active');
        }
        this.parentNode.classList.add('active');
      }
    },

    function flyToStore(currentFeature) {
      this.map.flyTo({
        center: currentFeature.geometry.coordinates,
        zoom: 15
      });
    }

    function createPopUp(currentFeature) {
      var popUps = document.getElementsByClassName('mapboxgl-popup');
      // Check if there is already a popup on the map and if so, remove it
      if (popUps[0]) popUps[0].remove();

      var popup = new mapboxgl.Popup({ closeOnClick: false })
        .setLngLat(currentFeature.geometry.coordinates)
        .setHTML('<h3>'+ currentFeature.properties.Name+'</h3>' +
          '<h4>' + currentFeature.properties.Address + '</h4>')
        .addTo(this.map);
    }


    =======================
    // function buildLocationList(data) {
    //   // Iterate through the list of stores
    //
    //   for (let i = 0; i < data.features.length; i++) {
    //     var currentFeature = data.features[i];
    //     // Shorten data.feature.properties to just `prop` so we're not
    //     // writing this long form over and over again.
    //     var prop = currentFeature.properties;
    //     // Select the listing container in the HTML and append a div
    //     // with the class 'item' for each store
    //     var listings = document.getElementById('listings');
    //     var listing = listings.appendChild(document.createElement('div'));
    //     listing.className = 'item';
    //     listing.id = 'listing-' + i;
    //
    //     // Create a new link with the class 'title' for each store
    //     // and fill it with the store address
    //     var link = listing.appendChild(document.createElement('a'));
    //     link.href = '#';
    //     link.className = 'title';
    //     //link.dataPosition = i;
    //     link.innerHTML = prop["Name"];
    //
    //     // Create a new div with the class 'details' for each store
    //     // and fill it with the city and phone number
    //     var details = listing.appendChild(document.createElement('div'));
    //     details.innerHTML = prop["City"];
    //     if (prop["Phone"]) {
    //       details.innerHTML += ' &middot; ' + prop["Phone"] + '<hr>';
    //     }
    //
    //     link.addEventListener('click', function(e) {
    //       // Update the currentFeature to the store associated with the clicked link
    //       var clickedListing = data.features[this.dataPosition];
    //       console.log(clickedListing.geometry.coordinates);
    //       // 1. Fly to the point associated with the clicked link
    //       flyToStore(clickedListing);
    //       // 2. Close all other popups and display popup for clicked store
    //       createPopUp(clickedListing);
    //       // 3. Highlight listing in sidebar (and remove highlight for all other listings)
    //       var activeItem = document.getElementsByClassName('active');
    //       if (activeItem[0]) {
    //         activeItem[0].classList.remove('active');
    //       }
    //       this.parentNode.classList.add('active');
    //     });
    //   }
    // }
